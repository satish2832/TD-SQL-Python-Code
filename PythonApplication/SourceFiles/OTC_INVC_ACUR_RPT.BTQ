
/*************************************************************************************
SCRIPT NAME: FCT_OTC_INVC_ACUR_RPT.BTQ
DESCRIPTION: PROCESS FOR Invoice Accuracy AT SEMANTIC LAYER

AUTHOR            	DATE
Srinivasa Rao Kintali   2017-05-30 (ORIGINAL)
COMMENTS : THIS JOB SHOULD RUN AFTER THE ETL
*************************************************************************************/

.RUN FILE=@TD_LOGON@;
SET QUERY_BAND='CAPABILITY=OTC;JOB_STREAM_NM=CNLV-SMOT-INVACR;JOB_NM=CN_LV_SM_TD_OT_INVC_ACUR;BTEQ_NM=OTC_INVC_ACUR_RPT;'  FOR SESSION;
.SET WIDTH 255
.SET ERROROUT STDOUT
/* ------------------------------------------------------------------------------------ */
/* VOLATILE MAX AND MIN MONTH TABLE */
/* ------------------------------------------------------------------------------------ */

CREATE VOLATILE TABLE MX_MTH AS(
SELECT Min(RPTG_MO_DT) AS MIN_MTH,Max(RPTG_MO_DT) AS MAX_MTH 
FROM @WWP_BASE_VIEW_DB@.WWP_OTC_INVC_ACUR_AGG
WHERE ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'
)
WITH DATA ON COMMIT PRESERVE ROWS
;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;
/* ------------------------------------------------------------------------------------ */
/* VOLATILE TABLE FOR LAST 13 MONTHS DATA */
/* ------------------------------------------------------------------------------------ */
CREATE VOLATILE TABLE RPT_MNTS AS(
	SELECT RPTG_MO_DT AS RPT_DT,DERIV_RPTG_YR_NUM, DERIV_RPTG_MO_NUM
	,Row_Number() Over (ORDER BY RPTG_MO_DT DESC ) AS RNK
	 FROM @WWP_BASE_VIEW_DB@.WWP_OTC_INVC_ACUR_AGG
	QUALIFY RNK <14
	WHERE ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'
	GROUP BY 1,2,3
)
WITH DATA ON COMMIT PRESERVE ROWS
;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

BT;

DELETE FROM @BASE_VIEW_DB@.FCT_OTC_INVC_ACUR_RPT;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

/* -------------------------------------------------------------------------------------------------------------------------------------------- */
/* Insert all the rows to load Invoice Accuracy data into sem table FCT_OTC_INVC_ACUR_RPT */
/* -------------------------------------------------------------------------------------------------------------------------------------------- */

INSERT INTO @BASE_VIEW_DB@.FCT_OTC_INVC_ACUR_RPT(
RGN_ID                        
,CLUS_ID                       
,MCO_ID                        
,MSO_ID                        
,CTRY_CD                                      
,RPT_DT                        
,MAX_RPT_DT
,CORR_REFSLS          
,CORR_VAL             
,CORR_NO_OF_LOSS      
,NET_CORR_INVC        
,NRML_REFSLS          
,NRML_VAL             
,NRML_NO_OF_LOSS      
,NET_NRML_INVC
,TOT_INVC_ACUR_PCT    
,DELV_INVC_ACUR_PCT
,PRC_INVC_ACUR_PCT    
,MAT_CORR_REFSLS_SUM  
,MAT_CORR_VAL_SUM     
,MAT_CORR_LOSS_SUM    
,MAT_NET_CORR_INVC_SUM 
,MAT_NRML_REFSLS_SUM  
,MAT_NRML_VAL_SUM     
,MAT_NRML_LOSS_SUM    
,MAT_NET_NRML_INVC_SUM 
,MAT_CORR_REFSLS_AVG  
,MAT_CORR_VAL_AVG     
,MAT_CORR_LOSS_AVG    
,MAT_NET_CORR_INVC_AVG 
,MAT_NRML_REFSLS_AVG  
,MAT_NRML_VAL_AVG     
,MAT_NRML_LOSS_AVG    
,MAT_NET_NRML_INVC_AVG 
,MAT_TOT_INVC_ACUR_PCT 
,MAT_DELV_INVC_ACUR_PCT 
,MAT_PRC_INVC_ACUR_PCT 
,YTD_TOT_INVC_ACUR_PCT 
,YTD_DELV_INVC_ACUR_PCT 
,YTD_PRC_INVC_ACUR_PCT               
)
SELECT 
RGN_ID
,CLUS_ID 
,MCO_ID 
,MSO_ID
,CTRY_CD
,A.RPTG_MO_DT
,REP_MONTH
,CORR_REFSLS_CNT
,CORR_VAL_CNT
,CORR_NO_LOSS_CNT
,NET_CORR_INVOICE
,NRML_REFSLS_CNT
,NRML_VAL_CNT
,NRML_NO_LOSS_CNT
,NET_NORM_INVOICE
,(1-(NET_CORR_INVOICE*1.00000/NullIfZero(NET_NORM_INVOICE)))*100 AS TOT_INV_ACC_PER
,(1-(CORR_REFSLS_CNT*1.00000/NullIfZero(NET_NORM_INVOICE)))*100 AS DEL_INV_ACC_PER
,(1-(CORR_VAL_CNT*1.00000/NullIfZero(NET_NORM_INVOICE)))*100 AS PRICE_INV_ACC_PER

,CORR_REFSLS_CNT_SUM
,CORR_VAL_CNT_SUM
,CORR_NO_LOSS_CNT_SUM
,NET_CORR_INVOICE_SUM
,NRML_REFSLS_CNT_SUM
,NRML_VAL_CNT_SUM
,NRML_NO_LOSS_CNT_SUM
,NET_NORM_INVOICE_SUM

,CORR_REFSLS_CNT_AVG
,CORR_VAL_CNT_AVG
,CORR_NO_LOSS_CNT_AVG
,NET_CORR_INVOICE_AVG
,NRML_REFSLS_CNT_AVG
,NRML_VAL_CNT_AVG
,NRML_NO_LOSS_CNT_AVG
,NET_NORM_INVOICE_AVG

,Coalesce((1-(NET_CORR_INVOICE_SUM*1.00000/NullIfZero(NET_NORM_INVOICE_SUM)))*100 , 0)AS TOT_INV_ACC_AVG_PER
,Coalesce((1-(CORR_REFSLS_CNT_SUM*1.00000/NullIfZero(NET_NORM_INVOICE_SUM)))*100 , 0)AS DEL_INV_ACC_AVG_PER
,Coalesce((1-(CORR_VAL_CNT_SUM*1.00000/NullIfZero(NET_NORM_INVOICE_SUM)))*100 , 0) AS PRICE_INV_ACC_AVG_PER
,Coalesce((1-(YTD_NET_CORR_INVOICE*1.00000/NullIfZero(YTD_NET_NORM_INVOICE)))*100 , 0) AS YTD_TOT_INV_ACC_PER
,Coalesce((1-(YTD_CORR_REFSLS_CNT*1.00000/NullIfZero(YTD_NET_NORM_INVOICE)))*100 , 0) AS YTD_DEL_INV_ACC_PER
,Coalesce((1-(YTD_CORR_VAL_CNT*1.00000/NullIfZero(YTD_NET_NORM_INVOICE)))*100 , 0) AS YTD_PRICE_INV_ACC_PER



FROM
(
SELECT 
RGN_ID
,CLUS_ID 
,MCO_ID 
,MSO_ID
,CTRY_CD
,A.RPTG_MO_DT
,MAX_MTH AS REP_MONTH
,COALESCE(CORR_REFSLS_CNT,0) AS CORR_REFSLS_CNT
,COALESCE(CORR_VAL_CNT,0) AS CORR_VAL_CNT
,COALESCE(CORR_NO_LOSS_CNT,0) AS CORR_NO_LOSS_CNT
,(COALESCE(CORR_REFSLS_CNT,0)+COALESCE(CORR_VAL_CNT,0)+COALESCE(CORR_NO_LOSS_CNT,0)) AS NET_CORR_INVOICE
,COALESCE(NRML_REFSLS_CNT,0) AS NRML_REFSLS_CNT
,COALESCE(NRML_VAL_CNT,0) AS NRML_VAL_CNT
,COALESCE(NRML_NO_LOSS_CNT,0) AS NRML_NO_LOSS_CNT
,(COALESCE(NRML_REFSLS_CNT,0)+COALESCE(NRML_VAL_CNT,0)+COALESCE(NRML_NO_LOSS_CNT,0)) AS NET_NORM_INVOICE

,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN SUM(COALESCE(CORR_REFSLS_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS CORR_REFSLS_CNT_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN SUM(COALESCE(CORR_VAL_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS CORR_VAL_CNT_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN SUM(COALESCE(CORR_NO_LOSS_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS CORR_NO_LOSS_CNT_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN SUM(COALESCE(NET_CORR_INVOICE,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS NET_CORR_INVOICE_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN SUM(COALESCE(NRML_REFSLS_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS NRML_REFSLS_CNT_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN SUM(COALESCE(NRML_VAL_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS NRML_VAL_CNT_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN SUM(COALESCE(NRML_NO_LOSS_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS NRML_NO_LOSS_CNT_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN SUM(COALESCE(NET_NORM_INVOICE,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS NET_NORM_INVOICE_SUM

,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN AVG(COALESCE(CORR_REFSLS_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS CORR_REFSLS_CNT_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN AVG(COALESCE(CORR_VAL_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS CORR_VAL_CNT_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN AVG(COALESCE(CORR_NO_LOSS_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS CORR_NO_LOSS_CNT_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN AVG(COALESCE(NET_CORR_INVOICE,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS NET_CORR_INVOICE_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN AVG(COALESCE(NRML_REFSLS_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS NRML_REFSLS_CNT_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN AVG(COALESCE(NRML_VAL_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS NRML_VAL_CNT_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN AVG(COALESCE(NRML_NO_LOSS_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS NRML_NO_LOSS_CNT_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN AVG(COALESCE(NET_NORM_INVOICE,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS NET_NORM_INVOICE_AVG

,CASE WHEN EXTRACT( YEAR FROM A.RPTG_MO_DT) = EXTRACT( YEAR FROM MX_MTH.MAX_MTH)  THEN SUM(COALESCE(CORR_REFSLS_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD, EXTRACT(YEAR FROM RPTG_MO_DT) ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS  YTD_CORR_REFSLS_CNT
,CASE WHEN EXTRACT( YEAR FROM A.RPTG_MO_DT) = EXTRACT( YEAR FROM MX_MTH.MAX_MTH) THEN SUM(COALESCE(CORR_VAL_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD, EXTRACT(YEAR FROM RPTG_MO_DT) ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS  YTD_CORR_VAL_CNT
,CASE WHEN EXTRACT( YEAR FROM A.RPTG_MO_DT) = EXTRACT( YEAR FROM MX_MTH.MAX_MTH) THEN SUM(COALESCE(NET_CORR_INVOICE,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD, EXTRACT(YEAR FROM RPTG_MO_DT) ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS  YTD_NET_CORR_INVOICE
,CASE WHEN EXTRACT( YEAR FROM A.RPTG_MO_DT) = EXTRACT( YEAR FROM MX_MTH.MAX_MTH) THEN SUM(COALESCE(NET_NORM_INVOICE,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD, EXTRACT(YEAR FROM RPTG_MO_DT) ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS  YTD_NET_NORM_INVOICE

FROM
(
SELECT 
COALESCE(GEO.RGN_ID,'ALL') AS RGN_ID
,COALESCE(GEO.CLUS_ID,'ALL') AS CLUS_ID 
,COALESCE(GEO.MCO_ID,'ALL') AS MCO_ID 
,COALESCE(GEO.MSO_ID,'ALL') AS MSO_ID
,COALESCE(A.CTRY_CD,'ALL') AS CTRY_CD
,A.RPTG_MO_DT
,SUM(COALESCE(CORR_REFSLS_CNT,0)) AS CORR_REFSLS_CNT
,SUM(COALESCE(CORR_VAL_CNT,0)) AS CORR_VAL_CNT
,SUM(COALESCE(CORR_NO_LOSS_CNT,0)) AS CORR_NO_LOSS_CNT
,SUM(COALESCE(NRML_REFSLS_CNT,0)) AS NRML_REFSLS_CNT
,SUM(COALESCE(NRML_VAL_CNT,0)) AS NRML_VAL_CNT
,SUM(COALESCE(NRML_NO_LOSS_CNT,0)) AS NRML_NO_LOSS_CNT
FROM @WWP_BASE_VIEW_DB@.WWP_OTC_INVC_ACUR_AGG A

INNER JOIN @WWP_BASE_VIEW_DB@.WWP_GEO_ANY_LVL GEO
ON A.CTRY_CD = GEO.CTRY_CD
AND GEO.GEO_TYPE_CD='CTRY'
AND GEO.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'
AND A.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'
AND RPTG_MO_DT >= (SELECT Add_Months(Min(RPT_DT),-12) FROM RPT_MNTS)

GROUP BY GROUPING SETS 
(
(GEO.RGN_ID,GEO.CLUS_ID,GEO.MCO_ID,GEO.MSO_ID,A.CTRY_CD,RPTG_MO_DT)
,(GEO.RGN_ID,GEO.CLUS_ID,GEO.MCO_ID,GEO.MSO_ID,RPTG_MO_DT)
,(GEO.RGN_ID,GEO.CLUS_ID,GEO.MCO_ID,RPTG_MO_DT)
,(GEO.RGN_ID,GEO.CLUS_ID,RPTG_MO_DT)
,(GEO.RGN_ID,RPTG_MO_DT)
,(RPTG_MO_DT)
)
) A
CROSS JOIN MX_MTH

) A

WHERE RPTG_MO_DT IN (SELECT RPT_DT FROM RPT_MNTS)
;
.IF Errorcode <> 0 THEN .QUIT  Errorcode;

ET;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

/* ------------------------------------------------------------------------------------ */
/*  COLLECT STATS									*/
/*								                         */
/* ------------------------------------------------------------------------------------ */

CALL DBADMIN.COLLECT_STATS ('@BASE_VIEW_DB@','FCT_OTC_INVC_ACUR_RPT','','V','','','','',STMNTOUT);
 
.IF Errorcode <> 0 THEN .QUIT  Errorcode;

SELECT Current_Timestamp ;

SET QUERY_BAND=NONE FOR SESSION;
.QUIT 0



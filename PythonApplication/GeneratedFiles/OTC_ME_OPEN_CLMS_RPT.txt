/*************************************************************************************

SCRIPT NAME: FCT_OTC_ME_OPEN_CLMS_RPT.BTQ

DESCRIPTION: PROCESS FOR MONTH END OPEN CLAIMS(PRICE CLAIMS AND LOGICSTIC CLAIMS) AT SEMANTIC LAYER

AUTHOR            DATE

KISHORE SUGURU       2017-02-24 (ORIGINAL)

COMMENTS : THIS JOB SHOULD RUN AFTER THE ETL AND OTHER SEMANTIC TABLE FCT_OTC_ME_OPEN_CLMS_RPT LOAD FROM OTC

TD AM SEM TEAM		   2018-03-27	   Adding condition to exclude region "I" data . Change id:4551

*************************************************************************************/

.RUN FILE=@TD_LOGON@;

SET QUERY_BAND='CAPABILITY=OTC;JOB_STREAM_NM=CNLV-SMOT-OPCLMS;JOB_NM=CN_LV_SM_TD_OT_OPEN_CLAIMS;BTEQ_NM=OTC_ME_OPEN_CLMS_RPT;'  FOR SESSION;

.SET WIDTH 255

.SET ERROROUT STDOUT

/* ------------------------------------------------------------------------------------ */

/* VOLATILE MAX AND MIN MONTH TABLE */

/* ------------------------------------------------------------------------------------ */

CREATE VOLATILE TABLE MX_MTH AS(

SELECT Min(CLM_RPT_DT) AS MIN_MTH,Max(CLM_RPT_DT) AS MAX_MTH 

FROM @WWP_BASE_VIEW_DB@.WWP_OTC_ME_OPEN_CLM

WHERE ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

)

WITH DATA ON COMMIT PRESERVE ROWS

;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

/* ------------------------------------------------------------------------------------ */

/* VOLATILE TABLE FOR LAST 13 MONTHS DATA */

/* ------------------------------------------------------------------------------------ */

CREATE VOLATILE TABLE RPT_MNTS AS(

	SELECT CLM_RPT_DT AS RPT_DT,DERIV_RPTG_MO_DT AS DERIV_RPT_DT

	,Row_Number() Over (ORDER BY DERIV_RPTG_MO_DT DESC ) AS RNK

	 FROM @WWP_BASE_VIEW_DB@.WWP_OTC_ME_OPEN_CLM

	QUALIFY RNK <14

	WHERE ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

	GROUP BY 1,2

)

WITH DATA ON COMMIT PRESERVE ROWS

;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

/* ------------------------------------------------------------------------------------ */

/* VOLATILE TABLE FOR BAD DEBT CUSTOMERS DATA */

/* ------------------------------------------------------------------------------------ */

CREATE VOLATILE TABLE BAD_DEBT_CUST AS

(

SELECT CUST_ID AS ACCOUNT_NO, CO_ID AS COMPANY_CODE, RGN_IN, SNAP_MO_DT FROM @WWP_BASE_VIEW_DB@.WWP_CUST_CO_ASGNMT

   WHERE (RGN_IN IN ('A','E') AND CR_REP_GRP_CD ='99') OR (RGN_IN in ('I','R') AND ACTG_CLERK_GRP_CD ='AB')--Change id:4551

)

WITH DATA ON COMMIT PRESERVE ROWS

;

/* ------------------------------------------------------------------------------------ */

/* VOLATILE TABLE FOR TOTAL DEBT*/

/* ------------------------------------------------------------------------------------ */

CREATE VOLATILE MULTISET TABLE TOTAL_DEBT AS(

SELECT

 Coalesce(RGN_ID,'ALL') AS REGION_ID

,Coalesce(CLUS_ID,'ALL') AS CLUSTER_ID

,Coalesce(MCO_ID,'ALL') AS MCO_ID

,Coalesce(MSO_ID,'ALL') AS MSO_ID

,Coalesce(CTRY_CD,'ALL') AS COUNTRY_CODE

,Coalesce(ACCOUNT_NO,'ALL') AS ACCOUNT_NO

,CLM_RPT_DT AS REPORT_DATE   

 ,SUM(BASE_OUTSTNDING) AS TOT_DEBT

FROM(

  SELECT

  Coalesce(GEO.RGN_ID,'UNKWN') AS RGN_ID

  ,Coalesce(GEO.CLUS_ID,'UNKWN') AS CLUS_ID

  ,Coalesce(GEO.MCO_ID,'UNKWN') AS MCO_ID

  ,Coalesce(GEO.MSO_ID,'UNKWN') AS MSO_ID

  ,B.CTRY_CD

  ,ACCOUNT_NO

  ,B.CLM_RPT_DT                   

  ,BASE_OUTSTNDING

  FROM

  (

  SEL 

  B.CTRY_CD

  ,Trim(A.ACTG_DOC_CUST_ID) AS ACCOUNT_NO

  ,A.CLM_RPT_DT                   

  ,sum(A.EUR_CURY_OUT_AMT) AS BASE_OUTSTNDING

  

  FROM @WWP_BASE_VIEW_DB@.WWP_OTC_ME_OPEN_CLM A 

  INNER JOIN @WWP_BASE_VIEW_DB@.WWP_CO B

  ON A.CO_ID=B.CO_ID

  AND A.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

  AND B.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000' 

  AND DERIV_RPTG_MO_DT >= (SELECT Add_Months(Min(DERIV_RPT_DT),-12) FROM RPT_MNTS)

  AND NOT EXISTS (

   SEL 1 FROM BAD_DEBT_CUST B WHERE A.ACTG_DOC_CUST_ID=B.ACCOUNT_NO AND A.CO_ID=B.COMPANY_CODE AND A.RGN_IN=B.RGN_IN AND A.CLM_RPT_DT=B.SNAP_MO_DT  ) 

GROUP BY 1,2,3

) B

  LEFT JOIN @WWP_BASE_VIEW_DB@.WWP_GEO_ANY_LVL GEO

  ON B.CTRY_CD = GEO.CTRY_CD

  AND GEO.GEO_TYPE_CD='CTRY'

  AND GEO.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

 ) A

GROUP BY GROUPING SETS(

(RGN_ID,CLM_RPT_DT),

(RGN_ID,ACCOUNT_NO,CLM_RPT_DT),

(RGN_ID,CLUS_ID,CLM_RPT_DT),

(RGN_ID,CLUS_ID,ACCOUNT_NO,CLM_RPT_DT),

(RGN_ID,CLUS_ID,MCO_ID,CLM_RPT_DT),

(RGN_ID,CLUS_ID,MCO_ID,ACCOUNT_NO,CLM_RPT_DT),

(RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CLM_RPT_DT),

(RGN_ID,CLUS_ID,MCO_ID,MSO_ID,ACCOUNT_NO,CLM_RPT_DT),

(RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD,CLM_RPT_DT),

(RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD,ACCOUNT_NO,CLM_RPT_DT),

(CLM_RPT_DT),

(ACCOUNT_NO,CLM_RPT_DT)

) 

)

WITH DATA PRIMARY INDEX(REGION_ID,CLUSTER_ID,MCO_ID,MSO_ID,COUNTRY_CODE,ACCOUNT_NO,REPORT_DATE)

ON COMMIT PRESERVE ROWS

;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

BT;

DELETE FROM @BASE_VIEW_DB@.FCT_OTC_ME_OPEN_CLMS_RPT;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

/* -------------------------------------------------------------------------------------------------------------------------------------------- */

/* Insert all the rows to load open logistics and Pricing Claims data into sem table FCT_OTC_ME_OPEN_CLMS_RPT */

/* -------------------------------------------------------------------------------------------------------------------------------------------- */

INSERT INTO @BASE_VIEW_DB@.FCT_OTC_ME_OPEN_CLMS_RPT(

RGN_ID                        

,CLUS_ID                       

,MCO_ID                        

,MSO_ID                        

,CTRY_CD                       

,CUST_NUM                      

,RPT_DT                        

,KPI_CD                        

,TOT_DEBT                      

,BCKT_UND_30_CNT               

,BCKT_ABV_30_CNT               

,BCKT_ABV_60_CNT               

,BCKT_ABV_180_CNT              

,TOT_BCKT_CNT                  

,BCKT_UND_30_AMT               

,BCKT_ABV_30_AMT               

,BCKT_ABV_60_AMT               

,BCKT_ABV_180_AMT              

,TOT_BCKT_AMT                  

,KPI_CLM_PCT                   

,CUST_NM                       

,MAT_TOT_AMT_SUM               

,MAT_TOT_DEBT_SUM              

,KPI_CLM_MAT_AVG               

)

SELECT * FROM

(

SELECT

REGION_ID               

,CLUSTER_ID

,MCO_ID

,MSO_ID

,COUNTRY_CODE

,CUST_CODE

,REPORT_DATE

,KPI_CD

,TOTAL_DEBT1

,BUCKET_UNDER_30

,BUCKET_ABOVE_30

,BUCKET_ABOVE_60

,BUCKET_ABOVE_180

,TOT_CNT

,BUCKET_UNDER_30_AMT

,BUCKET_ABOVE_30_AMT

,BUCKET_ABOVE_60_AMT

,BUCKET_ABOVE_180_AMT

,TOT_AMT

,KPI_CLM_PCT

,CUSTOMER_NAME

,CASE WHEN REPORT_DATE>MIN_MTH+305 THEN CASE WHEN KPI_CD='OCOLC' THEN Sum(TOT_AMT) Over (PARTITION BY REGION_ID,CLUSTER_ID,MCO_ID,MSO_ID,COUNTRY_CODE,COUNTRY_CODE,CUST_CODE,KPI_CD ORDER BY REPORT_DATE ROWS BETWEEN 11 Preceding AND CURRENT ROW) 

					ELSE Avg(TOT_AMT) Over (PARTITION BY REGION_ID,CLUSTER_ID,MCO_ID,MSO_ID,COUNTRY_CODE,COUNTRY_CODE,CUST_CODE,KPI_CD ORDER BY REPORT_DATE ROWS BETWEEN 11 Preceding AND CURRENT ROW) END 

 END AS MAT_TOT_AMT_SUM

,CASE WHEN REPORT_DATE>MIN_MTH+305 THEN CASE WHEN KPI_CD='OCOLC' THEN Sum(TOTAL_DEBT1) Over (PARTITION BY REGION_ID,CLUSTER_ID,MCO_ID,MSO_ID,COUNTRY_CODE,COUNTRY_CODE,CUST_CODE,KPI_CD ORDER BY REPORT_DATE ROWS BETWEEN 11 Preceding AND CURRENT ROW) 

				        ELSE Avg(TOTAL_DEBT1) Over (PARTITION BY REGION_ID,CLUSTER_ID,MCO_ID,MSO_ID,COUNTRY_CODE,COUNTRY_CODE,CUST_CODE,KPI_CD ORDER BY REPORT_DATE ROWS BETWEEN 11 Preceding AND CURRENT ROW) END

END AS MAT_TOT_DEBT_SUM

,(((100.00*MAT_TOT_AMT_SUM)/100)/NullIfZero(MAT_TOT_DEBT_SUM))*100 AS KPI_CLM_MAT_AVG

FROM(

	SELECT

	B.REGION_ID

	,B.CLUSTER_ID

	,B.MCO_ID

	,B.MSO_ID

	,B.COUNTRY_CODE

	,CUST_CODE

	,CUSTOMER_NAME

	,KPI_CD

	,B.REPORT_DATE

	,DEBT.TOT_DEBT AS TOTAL_DEBT1

	,Sum(CASE WHEN BUCKET='BUCKET_UNDER_30' THEN Cnt ELSE 0 END) AS BUCKET_UNDER_30

	,Sum(CASE WHEN BUCKET='BUCKET_ABOVE_30' THEN Cnt ELSE 0 END) AS BUCKET_ABOVE_30

	,Sum(CASE WHEN BUCKET='BUCKET_ABOVE_60' THEN Cnt ELSE 0 END) AS BUCKET_ABOVE_60

	,Sum(CASE WHEN BUCKET='BUCKET_ABOVE_180' THEN Cnt ELSE 0 END) AS BUCKET_ABOVE_180

	,BUCKET_UNDER_30+BUCKET_ABOVE_30+BUCKET_ABOVE_60+BUCKET_ABOVE_180 AS TOT_CNT

	,Sum(CASE WHEN BUCKET='BUCKET_UNDER_30' THEN AMT ELSE 0 END) AS BUCKET_UNDER_30_AMT

	,Sum(CASE WHEN BUCKET='BUCKET_ABOVE_30' THEN AMT ELSE 0 END) AS BUCKET_ABOVE_30_AMT

	,Sum(CASE WHEN BUCKET='BUCKET_ABOVE_60' THEN AMT ELSE 0 END) AS BUCKET_ABOVE_60_AMT

	,Sum(CASE WHEN BUCKET='BUCKET_ABOVE_180' THEN AMT ELSE 0 END) AS BUCKET_ABOVE_180_AMT

	,BUCKET_UNDER_30_AMT+BUCKET_ABOVE_30_AMT+BUCKET_ABOVE_60_AMT+BUCKET_ABOVE_180_AMT AS TOT_AMT

	,(((100.00*TOT_AMT)/100)/NullIfZero(TOTAL_DEBT1))*100 AS KPI_CLM_PCT

FROM(

	SELECT

	Coalesce(B.REGION_ID,'ALL') AS REGION_ID

	,Coalesce(B.SUB_REGIONIDENTIFIER,'ALL') AS CLUSTER_ID

	,Coalesce(B.MCO_ID,'ALL') AS MCO_ID

	,Coalesce(B.MSO_ID,'ALL') AS MSO_ID

	,Coalesce(B.COUNTRY_CODE,'ALL') AS COUNTRY_CODE

	,Coalesce(CUST_CODE,'ALL') AS CUST_CODE

	,Coalesce(CUSTOMER_NAME,'ALL') AS CUSTOMER_NAME

	,B.KPI_CD

	,REPORT_DATE

	,BUCKET

	,Count(BU) AS Cnt

	,Sum(BASE_OUTSTNDING) AS AMT

FROM(

	SELECT 

	Coalesce(GEO.RGN_ID,'UNKWN') AS REGION_ID

	,Coalesce(GEO.CLUS_ID,'UNKWN') AS SUB_REGIONIDENTIFIER

	,Coalesce(GEO.MCO_ID,'UNKWN') AS MCO_ID

	,Coalesce(GEO.MSO_ID,'UNKWN') AS MSO_ID	

	,B.CTRY_CD AS COUNTRY_CODE

	,Trim(ACTG_DOC_CUST_ID) AS CUST_CODE

	,Coalesce(CUST.CUST_NM,'UNKNOWN') AS CUSTOMER_NAME	

	,CLM_RPT_DT AS REPORT_DATE

	,EUR_CURY_OUT_AMT AS BASE_OUTSTNDING

	,CASE DSPUT.CLM_DSPUT_CAT_DESC WHEN 'Logistic Claims - inbound' THEN 'OCOLC' ELSE 'OCOPC' END AS KPI_CD		-- ''2 for Pricing Claims - On-Invoice - Inbound, ''9 for Logistic Claims - inbound'

	,REPORT_DATE - CLM_NET_DUE_DT AS BU

	,CASE WHEN BU <=30 THEN 'BUCKET_UNDER_30'

				 WHEN BU BETWEEN 31 AND 60 THEN 'BUCKET_ABOVE_30'

				 WHEN BU BETWEEN 61 AND 180 THEN 'BUCKET_ABOVE_60'

				 WHEN BU > 180 THEN 'BUCKET_ABOVE_180'

				 END AS BUCKET

	FROM @WWP_BASE_VIEW_DB@.WWP_OTC_ME_OPEN_CLM AS A

	INNER JOIN @WWP_BASE_VIEW_DB@.WWP_CO AS B

	ON A.CO_ID=B.CO_ID

	AND A.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

	AND B.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000' 

	AND DERIV_RPTG_MO_DT >= (SELECT Add_Months(Min(DERIV_RPT_DT),-12) FROM RPT_MNTS)

	INNER JOIN @WWP_BASE_VIEW_DB@.WWP_OTC_CLM_DSPUT_CAT_ASGNMT AS ASGNMT

	ON A.CLM_RSN_ID = ASGNMT.CLM_RSN_ID

	AND A.DATA_PRVDR_ID = ASGNMT.DATA_PRVDR_ID

	AND ASGNMT.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000' 

	

	INNER JOIN @WWP_BASE_VIEW_DB@.WWP_OTC_CLM_DSPUT_CAT AS DSPUT

	ON ASGNMT.CLM_DSPUT_CAT_ID = DSPUT.CLM_DSPUT_CAT_ID

	AND CLM_DSPUT_CAT_DESC IN ('Logistic Claims - inbound','Pricing Claims - On-Invoice - Inbound')

	AND DSPUT.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000' 

	

	LEFT JOIN @WWP_BASE_VIEW_DB@.WWP_GEO_ANY_LVL AS GEO

		ON B.CTRY_CD = GEO.CTRY_CD

		AND GEO.GEO_TYPE_CD='CTRY'

		AND GEO.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

	LEFT JOIN @WWP_BASE_VIEW_DB@.WWP_CUST_CO_ASGNMT CUST

	ON TRIM(A.ACTG_DOC_CUST_ID)=CUST.CUST_ID

	AND A.CO_ID=CUST.CO_ID

	AND A.CLM_RPT_DT=CUST.SNAP_MO_DT

	AND CUST.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

	WHERE KPI_CD IS NOT NULL

	AND (ACTG_DOC_CUST_ID, A.CO_ID , A.RGN_IN , CLM_RPT_DT) NOT IN (

	SELECT CUST_ID , CO_ID, RGN_IN, SNAP_MO_DT FROM @WWP_BASE_VIEW_DB@.WWP_CUST_CO_ASGNMT

	WHERE (A.RGN_IN IN ('A','E') AND CR_REP_GRP_CD ='99') OR (RGN_IN in ('I','R') AND ACTG_CLERK_GRP_CD ='AB') AND ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'--Change id:4551

     )

) B													

GROUP BY GROUPING SETS(

(REGION_ID,KPI_CD,REPORT_DATE, BUCKET),

(REGION_ID,CUST_CODE,CUSTOMER_NAME,KPI_CD,REPORT_DATE, BUCKET),

(REGION_ID,SUB_REGIONIDENTIFIER,KPI_CD,REPORT_DATE, BUCKET),

(REGION_ID,SUB_REGIONIDENTIFIER,CUST_CODE,CUSTOMER_NAME,KPI_CD,REPORT_DATE, BUCKET),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,KPI_CD,REPORT_DATE, BUCKET),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,CUST_CODE,CUSTOMER_NAME,KPI_CD,REPORT_DATE, BUCKET),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,MSO_ID,KPI_CD,REPORT_DATE, BUCKET),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,MSO_ID,CUST_CODE,CUSTOMER_NAME,KPI_CD,REPORT_DATE, BUCKET),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,MSO_ID,COUNTRY_CODE,KPI_CD,REPORT_DATE, BUCKET),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,MSO_ID,COUNTRY_CODE,CUST_CODE,CUSTOMER_NAME,KPI_CD,REPORT_DATE, BUCKET),

(KPI_CD,REPORT_DATE, BUCKET),

(CUST_CODE,CUSTOMER_NAME,KPI_CD,REPORT_DATE, BUCKET)

)

)B

LEFT JOIN TOTAL_DEBT DEBT

ON B.CUST_CODE=DEBT.ACCOUNT_NO

AND B.REGION_ID=DEBT.REGION_ID

AND B.CLUSTER_ID=DEBT.CLUSTER_ID

AND B.MCO_ID=DEBT.MCO_ID

AND B.MSO_ID=DEBT.MSO_ID

AND B.COUNTRY_CODE=DEBT.COUNTRY_CODE

AND B.REPORT_DATE=DEBT.REPORT_DATE

GROUP BY 

B.REGION_ID

,B.CLUSTER_ID

,B.MCO_ID

,B.MSO_ID

,B.COUNTRY_CODE

,CUST_CODE

,KPI_CD

,B.REPORT_DATE

,DEBT.TOT_DEBT

,CUSTOMER_NAME

)C

CROSS JOIN MX_MTH

) A

WHERE REPORT_DATE IN (SELECT RPT_DT FROM RPT_MNTS)

;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

ET;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

/* ------------------------------------------------------------------------------------ */

/*  COLLECT STATS									*/

/*								                         */

/* ------------------------------------------------------------------------------------ */

CALL DBADMIN.COLLECT_STATS ('@BASE_VIEW_DB@','FCT_OTC_ME_OPEN_CLMS_RPT','','V','','','','',STMNTOUT);

 

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

SELECT Current_Timestamp ;

SET QUERY_BAND=NONE FOR SESSION;

.QUIT 0


/*************************************************************************************

SCRIPT NAME: OTC_DAY_SLS_OUT_RPT.BTQ

DESCRIPTION: PROCESS FOR DAY SALES OUTSTANDING AT SEMANTIC LAYER

AUTHOR            DATE

VARUN BASAVARAJU       2016-10-12 (ORIGINAL)

COMMENTS : THIS JOB SHOULD RUN AFTER THE ETL AND OTHER SEMANTIC TABLE OTC_OVRDU_DEBT_RPT LOAD FROM OTC

TD AM SEM TEAM		2017-07-27	Performance improvement change: replacing ‘qualify’ clause with ‘group by’ Change id:4001

TD AM SEM TEAM		2018-03-27	   Adding condition to exclude region "I" data . Change id:4551

*************************************************************************************/

.RUN FILE=@TD_LOGON@;

SET QUERY_BAND='CAPABILITY=OTC;JOB_STREAM_NM=CNLV-SMOT-SLSOUT;JOB_NM=CN_LV_SM_TD_OT_SLS_OUT_RPT;BTEQ_NM=OTC_DAY_SLS_OUT_RPT;'  FOR SESSION;

.SET WIDTH 255

.SET ERROROUT STDOUT

/* ------------------------------------------------------------------------------------ */

/* VOLATILE MAX AND MIN MONTH TABLE */

/* ------------------------------------------------------------------------------------ */

CREATE VOLATILE TABLE MX_MTH AS

(

SELECT MIN(ACTG_DOC_OVRDU_RPTG_DT) AS MIN_MTH,MAX(ACTG_DOC_OVRDU_RPTG_DT) AS MAX_MTH FROM @WWP_BASE_VIEW_DB@.WWP_OTC_ACTG_DOC_LINE_MEAS

WHERE DERIV_MEAS_SRC_CD = 'OD' AND ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

)

WITH DATA ON COMMIT PRESERVE ROWS

;

.IF ERRORCODE <> 0 THEN .QUIT  ERRORCODE;

* ------------------------------------------------------------------------------------ */

/* VOLATILE TABLE FOR LAST 13 MONTHS DATA */

/* ------------------------------------------------------------------------------------ */

CREATE VOLATILE TABLE RPT_MNTS AS

(

SELECT ACTG_DOC_OVRDU_RPTG_DT AS RPT_DT

,ROW_NUMBER() OVER (ORDER BY ACTG_DOC_OVRDU_RPTG_DT DESC ) AS RNK

 FROM 

@WWP_BASE_VIEW_DB@.WWP_OTC_ACTG_DOC_LINE_MEAS

QUALIFY RNK <=24

WHERE DERIV_MEAS_SRC_CD = 'OD'

AND ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

GROUP BY 1

)

WITH DATA ON COMMIT PRESERVE ROWS

;

.IF ERRORCODE <> 0 THEN .QUIT  ERRORCODE;

/* ------------------------------------------------------------------------------------ */

/* VOLATILE OVER_DUE_TOTAL TABLE */

/* ------------------------------------------------------------------------------------ */

CREATE VOLATILE TABLE TOTAL_DEBT AS

(

SELECT

COMPANY_CODE

,REGION_ID

,CLUSTER_ID

,MCO_ID

,MSO_ID

,COUNTRY_CODE

,ACCOUNT_NO

,REPORT_DATE                      

,TOTAL_DEBT

FROM

(

SELECT

COALESCE(A.COMPANY_CODE,'ALL') AS COMPANY_CODE

,COALESCE(A.REGION_ID,'ALL') AS REGION_ID

,COALESCE(A.SUB_REGIONIDENTIFIER,'ALL') AS CLUSTER_ID

,COALESCE(A.MCO_ID,'ALL') AS MCO_ID

,COALESCE(A.MSO_ID,'ALL') AS MSO_ID

,COALESCE(A.COUNTRY_CODE,'ALL') AS COUNTRY_CODE

,COALESCE(ACCOUNT_NO,'ALL') AS ACCOUNT_NO

--,COALESCE(CUSTOMER_NAME,'ALL') AS CUSTOMER_NAME

, REPORT_DATE                      

,SUM(EUR_CURY_OVRDU_DEBT_AMT) AS TOTAL_DEBT

FROM 

(SELECT

A.CO_ID AS COMPANY_CODE

,COALESCE(GEO.RGN_ID,'UNKWN') AS REGION_ID

,COALESCE(GEO.CLUS_ID,'UNKWN') AS SUB_REGIONIDENTIFIER

,COALESCE(GEO.MCO_ID,'UNKWN') AS MCO_ID

,COALESCE(GEO.MSO_ID,'UNKWN') AS MSO_ID

,COALESCE(B.CTRY_CD,'ALL') AS COUNTRY_CODE

,A.ACTG_DOC_ACCT_ID AS ACCOUNT_NO

--,COALESCE(CUST.CUSTOMER_NAME,'UNKNOWN') AS CUSTOMER_NAME

,A.ACTG_DOC_OVRDU_RPTG_DT AS REPORT_DATE

,A.RGN_IN 

,A.EUR_CURY_OVRDU_DEBT_AMT

,CAST(( CASE WHEN (POSITION(' ' IN TRIM(ACTG_DOC_PST_KEY_CD)) > 0) OR (UPPER(TRIM(ACTG_DOC_PST_KEY_CD)) (CASESPECIFIC) <> LOWER(TRIM(ACTG_DOC_PST_KEY_CD)) (CASESPECIFIC))     THEN  NULL     ELSE ACTG_DOC_PST_KEY_CD     END ) AS INTEGER) AS POSTING_KEY

FROM @WWP_BASE_VIEW_DB@.WWP_OTC_ACTG_DOC_LINE_MEAS A

JOIN @WWP_BASE_VIEW_DB@.WWP_CO B

ON A.CO_ID=B.CO_ID

AND FIN_PST_RLVNC_TYPE_CD NOT IN ('X','Y')

AND DERIV_MEAS_SRC_CD = 'OD'

AND A.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

AND B.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000' 

AND A.ACTG_DOC_OVRDU_RPTG_DT >= (SELECT ADD_MONTHS(MIN(RPT_DT),-12) FROM RPT_MNTS)

LEFT JOIN @WWP_BASE_VIEW_DB@."WWP_GEO_ANY_LVL" GEO

ON B.CTRY_CD=GEO.CTRY_CD

AND GEO.GEO_TYPE_CD='CTRY'

AND GEO.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

LEFT JOIN 

(

/* Performance recomendation Change id:4001*/

SELECT CUST_ID AS CUSTOMER_NO ,

 MAX(CUST_NM) AS CUSTOMER_NAME,

 CO_ID, 

SNAP_MO_DT

FROM    @WWP_BASE_VIEW_DB@.WWP_CUST_CO_ASGNMT 

WHERE    ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

  GROUP BY 1,3,4

  

) CUST

ON A.ACTG_DOC_ACCT_ID=CUST.CUSTOMER_NO

AND A.CO_ID=CUST.CO_ID

AND A.ACTG_DOC_OVRDU_RPTG_DT=CUST.SNAP_MO_DT

WHERE   POSTING_KEY<20

) A

WHERE (ACCOUNT_NO,A.COMPANY_CODE,A.RGN_IN, A.REPORT_DATE) NOT IN (SELECT CUST_ID AS ACCOUNT_NO, CO_ID AS COMPANY_CODE, RGN_IN, SNAP_MO_DT  FROM @WWP_BASE_VIEW_DB@.WWP_CUST_CO_ASGNMT

              WHERE ((RGN_IN IN ('A','E') AND CR_REP_GRP_CD ='99')

              OR (RGN_IN in ('I','R') AND ACTG_CLERK_GRP_CD='AB')) AND ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000') --Change id:4551

GROUP BY GROUPING SETS

(

(COMPANY_CODE,REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,MSO_ID,COUNTRY_CODE,ACCOUNT_NO,REPORT_DATE),

(REGION_ID,REPORT_DATE),

(REGION_ID,ACCOUNT_NO,REPORT_DATE),

(REGION_ID,SUB_REGIONIDENTIFIER,REPORT_DATE),

(REGION_ID,SUB_REGIONIDENTIFIER,ACCOUNT_NO,REPORT_DATE),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,REPORT_DATE),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,ACCOUNT_NO,REPORT_DATE),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,MSO_ID,REPORT_DATE),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,MSO_ID,ACCOUNT_NO,REPORT_DATE),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,MSO_ID,COUNTRY_CODE,REPORT_DATE),

(REGION_ID,SUB_REGIONIDENTIFIER,MCO_ID,MSO_ID,COUNTRY_CODE,ACCOUNT_NO,REPORT_DATE),

(REPORT_DATE),

(ACCOUNT_NO,REPORT_DATE)

)

)A

CROSS JOIN MX_MTH

WHERE A.REPORT_DATE IN (SELECT RPT_DT FROM RPT_MNTS)

AND ACCOUNT_NO='ALL'

)

WITH DATA ON COMMIT PRESERVE ROWS

;

/*

CREATE VOLATILE TABLE OVER_DUE_TOTAL AS

(

SELECT TOT_DEBT

,RPT_DT

,RGN_ID

,CLUS_ID

,MCO_ID

,MSO_ID

,CTRY_CD

,MO_NUM

,YR_NUM

FROM @BASE_VIEW_DB@.FCT_OTC_OVRDU_DEBT_RPT

WHERE CUST_NUM='ALL'

GROUP BY 1,2,3,4,5,6,7,8,9

)

WITH DATA ON COMMIT PRESERVE ROWS

;

.IF ERRORCODE <> 0 THEN .QUIT  ERRORCODE;*/

/* ------------------------------------------------------------------------------------ */

/* VOLATILE OVERDUE DEBT TURNOVER TABLE */

/* ------------------------------------------------------------------------------------ */

CREATE VOLATILE TABLE OVERDUE_DEBT_TURNOVER AS

(

 SELECT

REGION_ID

,CLUSTER_ID

,MCO_ID

,MSO_ID

,COUNTRY_CODE

,MONTH_DATE

,EXTRACT(MONTH FROM MONTH_DATE) AS MONTH_NO

,EXTRACT(YEAR FROM MONTH_DATE) AS YEAR_NO

,TURNOVER

,NO_OF_DAYS

FROM

(

 

 SELECT

REGION_ID

,CLUSTER_ID

,MCO_ID

,MSO_ID

,COUNTRY_CODE

,MONTH_DATE

,EXTRACT(DAY FROM LAST_DAY(MONTH_DATE)) AS MX_DAY

,TURNOVER_MONTH

,SUM(TURNOVER_MONTH) OVER (PARTITION BY REGION_ID,CLUSTER_ID,MCO_ID,MSO_ID,COUNTRY_CODE ORDER BY MONTH_DATE  ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS TURNOVER

,SUM(MX_DAY) OVER (PARTITION BY REGION_ID,CLUSTER_ID,MCO_ID,MSO_ID,COUNTRY_CODE ORDER BY MONTH_DATE  ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS NO_OF_DAYS

FROM

(

SELECT COALESCE(B.REGION_ID, 'ALL') AS REGION_ID

,COALESCE(B.CLUSTER_ID, 'ALL') AS CLUSTER_ID

,COALESCE(B.MCO_ID, 'ALL') AS MCO_ID

,COALESCE(B.MSO_ID, 'ALL') AS MSO_ID

,COALESCE(B.COUNTRY_CODE, 'ALL') AS COUNTRY_CODE

,MONTH_DATE

,SUM(TURNOVER_MONTH) AS TURNOVER_MONTH

FROM 

(

SELECT 

COALESCE(GEO.RGN_ID,'UNKWN') AS REGION_ID

,COALESCE(GEO.CLUS_ID,'UNKWN') AS CLUSTER_ID

,COALESCE(GEO.MCO_ID,'UNKWN') AS MCO_ID

,COALESCE(GEO.MSO_ID,'UNKWN') AS MSO_ID

,COALESCE(A.CTRY_CD,'UNKWN') AS COUNTRY_CODE

,RPTG_MO_DT AS MONTH_DATE

,TURN_AMT AS TURNOVER_MONTH

FROM @WWP_BASE_VIEW_DB@.WWP_OTC_TURN_MEAS A

LEFT JOIN @WWP_BASE_VIEW_DB@."WWP_GEO_ANY_LVL" GEO

ON A.CTRY_CD=GEO.CTRY_CD

AND GEO.GEO_TYPE_CD='CTRY'

AND GEO.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

WHERE A.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'

)B

GROUP BY GROUPING SETS

(

(REGION_ID,CLUSTER_ID,MCO_ID,MSO_ID,COUNTRY_CODE,MONTH_DATE),

(REGION_ID,MONTH_DATE),

(REGION_ID,CLUSTER_ID,MONTH_DATE),

(REGION_ID,CLUSTER_ID,MCO_ID,MONTH_DATE),

(REGION_ID,CLUSTER_ID,MCO_ID,MSO_ID,MONTH_DATE),

(MONTH_DATE)

)

)C

)D

WHERE NO_OF_DAYS>70

)

WITH DATA  ON COMMIT PRESERVE ROWS

;

.IF ERRORCODE <> 0 THEN .QUIT  ERRORCODE;

/* ------------------------------------------------------------------------------------ */

/* Delete all the rows to load lastest data */

/* ------------------------------------------------------------------------------------ */

DELETE FROM @BASE_VIEW_DB@.FCT_OTC_DAY_SLS_OUT_RPT;

.IF ERRORCODE <> 0 THEN .QUIT  ERRORCODE;

/* ------------------------------------------------------------------------------------ */

/* Insert all the rows to load lastest data from EL table WWP_OTC_ACTG_DOC_LINE_MEAS */

/* ------------------------------------------------------------------------------------ */

INSERT INTO @BASE_VIEW_DB@.FCT_OTC_DAY_SLS_OUT_RPT

(

CO_ID

,RGN_ID

,CLUS_ID

,MCO_ID

,MSO_ID

,CTRY_CD

,RPT_DT

,TURN_OVR

,NUM_OF_DAYS

,TOT_DEBT

,DSO

,DSO_AVG

)

SELECT * FROM

(

SELECT

COMPANY_CODE                  

,REGION_ID                     

,CLUSTER_ID                    

,MCO_ID                        

,MSO_ID                        

,A.COUNTRY_CODE                  

,REPORT_DATE                                                      

,TURNOVER

,NO_OF_DAYS      

,TOTAL_DEBT1 

,DSO

,CASE WHEN REPORT_DATE>MIN_MTH+305 THEN AVG(DSO) OVER (PARTITION BY COMPANY_CODE,REGION_ID,CLUSTER_ID,MCO_ID,MSO_ID,COUNTRY_CODE ORDER BY REPORT_DATE ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS DSO_AVG

FROM 

(

SELECT

 A.COMPANY_CODE AS COMPANY_CODE                  

,A.REGION_ID AS REGION_ID                     

,A.CLUSTER_ID AS CLUSTER_ID                    

,A.MCO_ID AS MCO_ID                      

,A.MSO_ID AS MSO_ID                      

,A.COUNTRY_CODE AS COUNTRY_CODE                  

,A.REPORT_DATE AS REPORT_DATE                                                      

,TURNOVER

,NO_OF_DAYS      

,SUM(TOTAL_DEBT) AS TOTAL_DEBT1   

,(TOTAL_DEBT1/(TURNOVER))*NO_OF_DAYS AS DSO   --Need to remove 1000000 once we get proper values

FROM TOTAL_DEBT A

/*

JOIN OVER_DUE_TOTAL OD

ON  OD.RGN_ID=A.RGN_ID

AND OD.CLUS_ID=A.CLUS_ID

AND OD.MCO_ID=A.MCO_ID

AND OD.MSO_ID=A.MSO_ID

AND OD.CTRY_CD=A.CTRY_CD

AND OD.MO_NUM=A.MO_NUM

AND OD.YR_NUM=A.YR_NUM

AND OD.RPT_DT>= (SELECT ADD_MONTHS(MIN(RPT_DT),-12) FROM RPT_MNTS)*/

LEFT JOIN OVERDUE_DEBT_TURNOVER B

ON A.REGION_ID=B.REGION_ID

AND A.CLUSTER_ID=B.CLUSTER_ID

AND A.MCO_ID=B.MCO_ID

AND A.MSO_ID=B.MSO_ID

AND A.COUNTRY_CODE=B.COUNTRY_CODE

AND EXTRACT(MONTH FROM A.REPORT_DATE)=B.MONTH_NO

AND EXTRACT(YEAR FROM A.REPORT_DATE)=B.YEAR_NO

WHERE A.ACCOUNT_NO='ALL'

GROUP BY 1,2,3,4,5,6,7,8,9

)A

CROSS JOIN MX_MTH

) A

WHERE A.REPORT_DATE IN (SELECT RPT_DT FROM RPT_MNTS where RNK <14 )

;

.IF ERRORCODE <> 0 THEN .QUIT  ERRORCODE;

/* ------------------------------------------------------------------------------------ */

/*  COLLECT STATS									*/

/*								                         */

/* ------------------------------------------------------------------------------------ */

 CALL DBADMIN.COLLECT_STATS ('@BASE_VIEW_DB@','FCT_OTC_DAY_SLS_OUT_RPT','','V','','','','',STMNTOUT);

.IF ERRORCODE <> 0 THEN .QUIT  ERRORCODE;

SELECT CURRENT_TIMESTAMP ;

.IF ERRORCODE <> 0 THEN .QUIT  ERRORCODE

SET QUERY_BAND=NONE FOR SESSION;

.QUIT 0

